// https://github.com/deancureton/Sigma/blob/main/Sigma/Grammar/grammar.bnf

// TODO fix booleans (?)

program ::= [statementList]
statementList ::= statement+
statement ::= ( variableDeclaration "‼️" )
            | ( assignment "‼️" )
            | functionDefinition
            | loop
            | ifStatement
            | changeStatement
            | comment
            | ( expression "‼️" )

variableDeclaration ::= "var" IDENTIFIER ["<-" expression]

assignment ::= IDENTIFIER regularAssignment | ("++" | "--") IDENTIFIER

functionDefinition ::= "func" IDENTIFIER "<-" functionArgs ["[" optionalFunctionArgs "]"] block "‼️"
functionCall ::= IDENTIFIER "{" callArguments "}" "‼️"
callArguments ::= primary*

loop ::= forLoop | foreachLoop | whenLoop | loopLoop

forLoop ::= "for" "{" variableDeclaration "‼️" expression "‼️" assignment "}" block
foreachLoop ::= "foreach" "{" "var" IDENTIFIER "of" IDENTIFIER "}" block
whenLoop ::= "when" "{" expression "}" block
loopLoop ::= "loop" "{" NUMBER "}" block

ifStatement ::= "if" "{" expression "}" block butifStatementList [butStatement]
butifStatementList ::= butifStatement*
butifStatement ::= "butif" "{" expression "}" block
butStatement ::= "but" block

changeStatement ::= "change" "{" IDENTIFIER "}" "»" case+ "«" "‼️"
case ::= "case" "{" expression "}" block

comment ::= singleLineComment | multiLineComment
singleLineComment ::= "\\" COMMENTTEXT
multiLineComment ::= "\\." COMMENTTEXT ".\\"

type ::= "str" | "num" | "tf" | "arr"

regularAssignment ::= ("<-" | operatorAssignment) expression
operatorAssignment ::= "+<-" | "-<-" | "/<-" | "*<-" | "//<-" | "^<-" | "%<-"

functionArgs ::= IDENTIFIER*
optionalFunctionArgs ::= IDENTIFIER+

block ::= "»" [statementList] "«"

expression ::= orExpr
orExpr ::= xorExpr [("or" | "nor" | "implies") orExpr]
xorExpr ::= andExpr [("xor" | "xnor") xorExpr]
andExpr ::= weakEqualityExpr [("and" | "nand") andExpr]
weakEqualityExpr ::= equalityExpr [("??" | "!??" | "~" | "!~") weakEqualityExpr]
equalityExpr ::= comparisonExpr [("?" | "!?") equalityExpr]
comparisonExpr ::= sumExpr [("<" | ">" | "<?" | ">?" | "≤" | "≥") comparisonExpr]
sumExpr ::= productExpr [("+" | "-") sumExpr]
productExpr ::= exponentExpr [("*" | "//" | "/" | "%") sumExpr]
exponentExpr ::= unaryExpr ["^" exponentExpr]
unaryExpr ::= ("!" | "not" | "-") unaryExpr | primary
primary ::= functionCall | cast | NUMBER | IDENTIFIER | STRING | BOOLEAN | array | parenthesizedExpression
parenthesizedExpression ::= "{" expression "}"

array ::= "(" arrayElements ")"
arrayElements ::= primary*

cast ::= IDENTIFIER "." type