// https://github.com/deancureton/Sigma/blob/main/Sigma/Grammar/grammar.bnf

// TODO add switch (change) statement
// TODO fix booleans (?)
// TODO fix optional function arguments

program ::= [statementList]
statementList ::= statement+
statement ::= ( variableDeclaration "‼️" )
            | ( assignment "‼️" )
            | functionDefinition
            | loop
            | ifStatement
            | comment
            | ( expression "‼️" )

variableDeclaration ::= "var" IDENTIFIER ["<-" expression]

assignment ::= IDENTIFIER regularAssignment | unaryOperator IDENTIFIER

functionDefinition ::= "func" IDENTIFIER "<-" functionArgs block "‼️"
functionCall ::= IDENTIFIER "{" callArguments "}" "‼️"
callArguments ::= primary*

loop ::= forLoop | foreachLoop | whenLoop | loopLoop

forLoop ::= "for" "{" variableDeclaration "‼️" expression "‼️" assignment "}" block
foreachLoop ::= "foreach" "{" "var" IDENTIFIER "of" IDENTIFIER "}" block
whenLoop ::= "when" "{" expression "}" block
loopLoop ::= "loop" "{" NUMBER "}" block

ifStatement ::= "if" "{" expression "}" block butifStatementList [butStatement]
butifStatementList ::= butifStatement*
butifStatement ::= "butif" "{" expression "}" block
butStatement ::= "but" block

comment ::= singleLineComment | multiLineComment
singleLineComment ::= "\\" COMMENTTEXT
multiLineComment ::= "\\." COMMENTTEXT ".\\"

type ::= "str" | "num" | "tf" | "arr"

unaryOperator ::= "++" | "--" | "not" | "!" | "-"

regularAssignment ::= ("<-" | operatorAssignment) expression
operatorAssignment ::= "+<-" | "-<-" | "/<-" | "*<-" | "//<-" | "^<-" | "%<-"

functionArgs ::= functionArg* ["[" functionArg+ "]"]
functionArg ::= "var" IDENTIFIER

block ::= "»" [statementList] "«"

expression ::= binaryExpression
             | primary

binaryExpression ::= primary binaryOperator primary
                   | primary binaryOperator binaryExpression

primary ::= unaryExpression | NUMBER | IDENTIFIER | STRING | boolean | array | cast | functionCall

unaryExpression ::=  parenthesizedExpression | (unaryOperator primary)
parenthesizedExpression ::= "{" expression "}"

binaryOperator ::= binaryArithmeticOperator | binaryComparator | binaryBooleanOperator
binaryArithmeticOperator ::= "+" | "-" | "/" | "*" | "//" | "^" | "%"
binaryComparator ::= ">" | "<" | ">?" | "<?" | "≥" | "≤" | "?" | "!?" | "??" | "!??" | "~" | "!~"
binaryBooleanOperator ::= "and" | "or" | "nand" | "nor" | "xor" | "xnor" | "implies"

boolean ::= "true" | "false"

array ::= "(" arrayElements ")"
arrayElements ::= primary*

cast ::= IDENTIFIER "." type