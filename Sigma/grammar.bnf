// Dean Cureton, https://github.com/deancureton/Sigma/blob/main/Sigma/Grammar/grammar.bnf
program ::= [statementList]
statementList ::= statement+
statement ::= variableDeclaration
            | variableInitialization
            | ( assignment "‼️" )
            | functionDefinition
            | loop
            | ifStatement
            | comment
            | ( expression "‼️" )

variableDeclaration ::= type IDENTIFIER "‼️"
variableInitialization ::= strictType regularAssignment "‼️"

assignment ::= unaryAssignment | regularAssignment

functionDefinition ::= "func" IDENTIFIER "<-" functionArguments block "‼️"
functionCall ::= IDENTIFIER "{" callArguments "}" "‼️"
callArguments ::= primary*

loop ::= forLoop | foreachLoop | whenLoop | loopLoop

forLoop ::= "for" "{" variableInitialization "‼️" expression "‼️" assignment "}" block
foreachLoop ::= "foreach" "{" "var" IDENTIFIER "of" IDENTIFIER "}" block
whenLoop ::= "when" "{" expression "}" block
loopLoop ::= "loop" "{" NUMBER "}" block

ifStatement ::= "if" "{" expression "}" block butifStatement* [butStatement]
butifStatement ::= "butif" "{" expression "}" block
butStatement ::= "butif" "{" expression "}" block

comment ::= singleLineComment | multiLineComment
singleLineComment ::= "\\" COMMENTTEXT
multiLineComment ::= "\\." COMMENTTEXT ".\\"

type ::= "var" | strictType
strictType ::= "str" | "num" | "tf" | "arr"

unaryAssignment ::= increment | decrement
increment ::= IDENTIFIER "++"
decrement ::= IDENTIFIER "--"

regularAssignment ::= IDENTIFIER ("<-" | operatorAssignment) expression
operatorAssignment ::= "+<-" | "-<-" | "/<-" | "*<-" | "//<-" | "^<-" | "%<-"

functionArguments ::= regularFunctionArgument* optionalFunctionArgument*
regularFunctionArgument ::= type IDENTIFIER
optionalFunctionArgument ::= "[" type IDENTIFIER "]"

block ::= "|" [statementList] "|"

expression ::= binaryExpression
             | primary
             | unaryExpression

binaryExpression ::= primary binaryOperator primary
                   | primary binaryOperator binaryExpression

primary ::= NUMBER | IDENTIFIER | STRING | boolean | unaryExpression | array | cast | functionCall

unaryExpression ::= unaryAssignment | negationExpression | minusExpression | parenthesizedExpression
parenthesizedExpression ::= "{" expression "}"
negationExpression ::= "!" expression
minusExpression ::= "-" expression

binaryOperator ::= binaryArithmeticOperator | binaryComparator | binaryBooleanOperator
binaryArithmeticOperator ::= "+" | "-" | "/" | "*" | "//" | "^" | "%"
binaryComparator ::= ">" | "<" | ">?" | "<?" | "≥" | "≤" | "?" | "!?" | "??" | "!??" | "~" | "!~"
binaryBooleanOperator ::= "and" | "or" | "not" | "nand" | "nor" | "xor" | "xnor" | "implies"

boolean ::= "true" | "false"

array ::= "(" arrayElements ")"
arrayElements ::= primary*

cast ::= IDENTIFIER "." strictType